KMD
00000000: EA00007E    ;         B part3 ; part1 or part2 or part3
00000004:             ; 
00000004: 00 00 00 00 ; buffer  DEFS 100,0
00000008: 00 00 00 00 ; 
0000000C: 00 00 00 00 ; 
00000010: 00 00 00 00 ; 
00000014: 00 00 00 00 ; 
00000018: 00 00 00 00 ; 
0000001C: 00 00 00 00 ; 
00000020: 00 00 00 00 ; 
00000024: 00 00 00 00 ; 
00000028: 00 00 00 00 ; 
0000002C: 00 00 00 00 ; 
00000030: 00 00 00 00 ; 
00000034: 00 00 00 00 ; 
00000038: 00 00 00 00 ; 
0000003C: 00 00 00 00 ; 
00000040: 00 00 00 00 ; 
00000044: 00 00 00 00 ; 
00000048: 00 00 00 00 ; 
0000004C: 00 00 00 00 ; 
00000050: 00 00 00 00 ; 
00000054: 00 00 00 00 ; 
00000058: 00 00 00 00 ; 
0000005C: 00 00 00 00 ; 
00000060: 00 00 00 00 ; 
00000064: 00 00 00 00 ; 
00000068:             ; 
00000068: 6F 6E 65 00 ; s1      DEFB "one\0"
0000006C:             ;         ALIGN
0000006C: 74 77 6F 00 ; s2      DEFB "two\0"
00000070:             ;         ALIGN
00000070: 74 68 72 65 ; s3      DEFB "three\0"
00000074: 65 00       ; 
00000078:             ;         ALIGN
00000078: 66 6F 75 72 ; s4      DEFB "four\0"
0000007C: 00          ; 
00000080:             ;         ALIGN
00000080: 66 69 76 65 ; s5      DEFB "five\0"
00000084: 00          ; 
00000088:             ;         ALIGN
00000088: 73 69 78 00 ; s6      DEFB "six\0"
0000008C:             ;         ALIGN
0000008C: 73 65 76 65 ; s7      DEFB "seven\0"
00000090: 6E 00       ; 
00000094:             ;         ALIGN
00000094: 74 77 65 6E ; s8      DEFB "twentytwo\0"
00000098: 74 79 74 77 ; 
0000009C: 6F 00       ; 
000000A0:             ;         ALIGN
000000A0: 74 77 65 6E ; s9      DEFB "twenty\0"
000000A4: 74 79 00    ; 
000000A8:             ;         ALIGN
000000A8:             ; 
000000A8:             ; ;************************** part 1 **************************
000000A8:             ; printstring
000000A8:             ;         ;MOV  R0,R1     ; given
000000A8:             ;         ;SVC  3         ; given
000000A8:             ; ; your code goes here, replacing the previous 2 lines
000000A8:             ; 
000000A8: EA000000    ;         B mstart
000000AC: EF000000    ; print   SVC 0
000000B0: E4D10001    ; mstart  LDRB R0, [R1], #1
000000B4: E3500000    ;         CMP R0, #0
000000B8: 1AFFFFFB    ;         BNE print
000000BC:             ; 
000000BC: E3A0000A    ;         MOV  R0, #10    ; given - output end-of-line
000000C0: EF000000    ;         SVC  0          ; given
000000C4: E1A0F00E    ;         MOV  PC, LR     ; given
000000C8:             ; 
000000C8:             ; ;************************** part 2 ***************************
000000C8:             ; strcat
000000C8:             ; ; your code goes here
000000C8: E4D10001    ;         LDRB R0, [R1],#1
000000CC: E3500000    ;         CMP R0, #0
000000D0: 1AFFFFFC    ;         BNE strcat
000000D4: E2411001    ;         SUB R1, R1, #1
000000D8: E4D20001    ; return  LDRB R0, [R2], #1
000000DC: E4C10001    ;         STRB R0, [R1], #1
000000E0:             ;         
000000E0: E3500000    ;         CMP R0, #0
000000E4: 1AFFFFFB    ;         BNE return
000000E8:             ;         
000000E8: E1A0F00E    ;         MOV  PC, LR
000000EC:             ; strcpy
000000EC:             ; ; your code goes here   
000000EC: E4D20001    ;         LDRB R0, [R2],#1
000000F0: E3500000    ;         CMP R0, #0
000000F4: E4C10001    ;         STRB R0, [R1],#1
000000F8: 1AFFFFFB    ;         BNE strcpy
000000FC: E1A0F00E    ;         MOV  PC, LR
00000100:             ; 
00000100:             ; ;************************** part 3 **************************
00000100: E58FE028    ; sorted  STR LR, return2 ; given
00000104:             ; 
00000104: E4D24001    ; lStart  LDRB R4, [R2],#1; your code goes here
00000108: E4D35001    ;         LDRB R5, [R3],#1;
0000010C: E3540000    ;         CMP R4, #0
00000110: 0A000004    ;         BEQ exit
00000114: E3550000    ;         CMP R5, #0
00000118: 0A000002    ;         BEQ exit
0000011C: E1540005    ;         CMP R4, R5
00000120: 1A000000    ;         BNE exit
00000124: EAFFFFF6    ;         B lStart
00000128: E1540005    ; exit    CMP R4, R5      
0000012C: E51FF004    ;         LDR  PC, return2 ; given
00000130: 00000000    ; return2 DEFW 0          ; given
00000134:             ; 
00000134:             ; ;*********************** the various parts ********************
00000134: E24F10D4    ; part1   ADR R1, s1
00000138: EBFFFFDA    ;         BL  printstring
0000013C: E24F10D8    ;         ADR R1, s2
00000140: EBFFFFD8    ;         BL  printstring
00000144: E24F10DC    ;         ADR R1, s3
00000148: EBFFFFD6    ;         BL  printstring
0000014C: E24F10DC    ;         ADR R1, s4
00000150: EBFFFFD4    ;         BL  printstring
00000154: E24F10DC    ;         ADR R1, s5
00000158: EBFFFFD2    ;         BL  printstring
0000015C: E24F10DC    ;         ADR R1, s6
00000160: EBFFFFD0    ;         BL  printstring
00000164: E24F10E0    ;         ADR R1, s7
00000168: EBFFFFCE    ;         BL  printstring
0000016C: E24F10E0    ;         ADR R1, s8
00000170: EBFFFFCC    ;         BL  printstring
00000174: E24F10DC    ;         ADR R1, s9
00000178: EBFFFFCA    ;         BL  printstring
0000017C: EF000002    ;         SVC 2
00000180:             ; 
00000180: E24F2E12    ; part2   ADR R2, s1
00000184: E24F1F62    ;         ADR R1, buffer
00000188: EBFFFFD7    ;         BL  strcpy
0000018C: E24F1E19    ;         ADR R1, buffer
00000190: EBFFFFC4    ;         BL  printstring
00000194: E24F2E13    ;         ADR R2, s2
00000198: E24F1F67    ;         ADR R1, buffer
0000019C: EBFFFFC9    ;         BL  strcat
000001A0: E24F1F69    ;         ADR R1, buffer
000001A4: EBFFFFBF    ;         BL  printstring
000001A8: E24F2D05    ;         ADR R2, s3
000001AC: E24F1E1B    ;         ADR R1, buffer
000001B0: EBFFFFC4    ;         BL  strcat
000001B4: E24F1F6E    ;         ADR R1, buffer
000001B8: EBFFFFBA    ;         BL  printstring
000001BC: EF000002    ;         SVC 2
000001C0:             ; 
000001C0:             ; ; used by part3
000001C0: 00000000    ; return4 DEFW 0,0
000001C4: 00000000    ; 
000001C8: E50FE010    ; test2   STR LR, return4         ; This mechanism will be improved later
000001CC: E50F3010    ;         STR R3, return4+4       ; Assembler will evaluate addition      
000001D0: E1A00002    ;         MOV R0, R2
000001D4: EF000003    ;         SVC 3
000001D8: EBFFFFC8    ;         BL  sorted
000001DC: B3A0003C    ;         MOVLT R0, #'<'          ; Three-way IF using conditions
000001E0: 03A0003D    ;         MOVEQ R0, #'='
000001E4: C3A0003E    ;         MOVGT R0, #'>'
000001E8: EF000000    ;         SVC 0
000001EC: E51F0030    ;         LDR R0, return4+4
000001F0: EF000003    ;         SVC 3
000001F4: E3A0000A    ;         MOV R0, #10
000001F8: EF000000    ;         SVC 0
000001FC: E51FF044    ;         LDR PC, return4
00000200:             ; 
00000200: E24F2E1A    ; part3   ADR R2, s1
00000204: E24F3E1A    ;         ADR R3, s2
00000208: EBFFFFEE    ;         BL  test2
0000020C: E24F2F6A    ;         ADR R2, s2
00000210: E24F3F6A    ;         ADR R3, s3
00000214: EBFFFFEB    ;         BL  test2
00000218: E24F2E1B    ;         ADR R2, s3
0000021C: E24F3F6B    ;         ADR R3, s4
00000220: EBFFFFE8    ;         BL  test2
00000224: E24F2F6D    ;         ADR R2, s4
00000228: E24F3E1B    ;         ADR R3, s5
0000022C: EBFFFFE5    ;         BL  test2
00000230: E24F2F6E    ;         ADR R2, s5
00000234: E24F3F6D    ;         ADR R3, s6
00000238: EBFFFFE2    ;         BL  test2
0000023C: E24F2F6F    ;         ADR R2, s6
00000240: E24F3F6F    ;         ADR R3, s7
00000244: EBFFFFDF    ;         BL  test2
00000248: E24F2F71    ;         ADR R2, s7
0000024C: E24F3D07    ;         ADR R3, s8
00000250: EBFFFFDC    ;         BL  test2
00000254: E24F2F72    ;         ADR R2, s8
00000258: E24F3D07    ;         ADR R3, s9
0000025C: EBFFFFD9    ;         BL  test2
00000260: E24F2F75    ;         ADR R2, s8
00000264: E24F3F76    ;         ADR R3, s8
00000268: EBFFFFD6    ;         BL  test2
0000026C: EF000002    ;         SVC 2
00000270:             ; 

Symbol Table: Labels
: buffer                            00000004  Local -- ARM
: s1                                00000068  Local -- ARM
: s2                                0000006C  Local -- ARM
: s3                                00000070  Local -- ARM
: s4                                00000078  Local -- ARM
: s5                                00000080  Local -- ARM
: s6                                00000088  Local -- ARM
: s7                                0000008C  Local -- ARM
: s8                                00000094  Local -- ARM
: s9                                000000A0  Local -- ARM
: printstring                       000000A8  Local -- ARM
: print                             000000AC  Local -- ARM
: mstart                            000000B0  Local -- ARM
: strcat                            000000C8  Local -- ARM
: return                            000000D8  Local -- ARM
: strcpy                            000000EC  Local -- ARM
: sorted                            00000100  Local -- ARM
: lStart                            00000104  Local -- ARM
: exit                              00000128  Local -- ARM
: return2                           00000130  Local -- ARM
: part1                             00000134  Local -- ARM
: part2                             00000180  Local -- ARM
: return4                           000001C0  Local -- ARM
: test2                             000001C8  Local -- ARM
: part3                             00000200  Local -- ARM
